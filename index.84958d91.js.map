{"mappings":"AAAA,MAAMA,EAAQC,GACL,IAAIC,SAAQC,IACjBC,YAAW,KACTD,EAAQF,EAAG,GACVA,EAAG,IAIJI,EAASC,GAAQC,QAAQC,IAAI,kBAAkBF,OAE7BN,EAAlB,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GCT4B,MAAvCK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,SAAQC,IAIjBA,EAHqBW,EAASE,KAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IAE1C,IAKnBC,EAASC,GAAgBZ,QAAQa,MAAMD,G,wCClBD,MAItCE,EAAkBC,GACf,IAAIpB,SAAQ,CAACC,EAASoB,KAC3B,MAAMC,GANyBC,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQpCtB,YAAW,KACUuB,KAAKE,SAAW,GAGjC1B,EAAQ,CAAE2B,GAAIR,EAAYQ,GAAIxB,KAAMkB,IAEpCD,EAAOD,EAAYQ,GAAG,GAEvBN,EAAM,IAIPO,EAAaC,IACjBzB,QAAQC,IAAI,eAAewB,EAASF,mBAAmBE,EAAS1B,SAAS,EAGrE2B,EAAWH,IACfvB,QAAQ2B,KAAK,gCAAgCJ,6BAA8B,EAe7ET,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAO1B,KAAKsB,GAAYK,MAAMH,GAEhEZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAAM1B,KAAKsB,GAAYK,MAAMH,GAE/DZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAAO1B,KAAKsB,GAAYK,MAAMH,G","sources":["src/js/tasks-1.js","src/js/tasks-2.js","src/js/tasks-3.js"],"sourcesContent":["const delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\r\n// через ms миллисекунд.Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\r\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n\r\n  // callback(updatedUsers);\r\n};\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\r\n//  а принимала всего один параметр transaction и возвращала промис.\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = response => {\r\n  console.log(`Transaction ${response.id} processed in ${response.time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"names":["$f6186d1abc716611$var$delay","ms","Promise","resolve","setTimeout","$f6186d1abc716611$var$logger","time","console","log","then","$dbd511cfd6ec7dea$var$users","name","active","$dbd511cfd6ec7dea$var$toggleUserState","allUsers","userName","map","user","$dbd511cfd6ec7dea$var$logger","updatedUsers","table","$4b5e890f642785be$var$makeTransaction","transaction","reject","delay","min","max","Math","floor","random","id","$4b5e890f642785be$var$logSuccess","response","$4b5e890f642785be$var$logError","warn","amount","catch"],"version":3,"file":"index.84958d91.js.map"}